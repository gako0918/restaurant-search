{"version":3,"sources":["Search.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","Container","Form","Row","className","Col","sm","Control","value","search","onChange","handleSearchChange","Button","variant","onClick","handleSearchClick","ShopImage","image_url","Image","width","height","src","List","list","map","item","key","Media","shop_image1","Body","href","name","access","line","station","station_exit","budget","pr","pr_short","App","event","searchValue","target","setState","a","process","url","state","axios","get","res","result","data","rest","search_result","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uWAuBeA,EApBA,SAACC,GACd,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACJ,EAAA,EAAKK,QAAN,CACEC,MAAOR,EAAMS,OACbC,SAAUV,EAAMW,sBAGpB,kBAACN,EAAA,EAAD,CAAKC,GAAI,GACR,kBAACM,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASd,EAAMe,mBAAzC,qB,gBCXX,SAASC,EAAUhB,GACjB,OAAGA,EAAMiB,UAEL,kBAACC,EAAA,EAAD,CAAOC,MAAO,IAAKC,OAAQ,IAAKC,IAAKrB,EAAMiB,YAI3C,yDA+CSK,MA1Cf,SAAetB,GACb,IAAMuB,EAAOvB,EAAMuB,KAAKC,KAAI,SAACC,EAAMC,GACjC,OACE,kBAACzB,EAAA,EAAD,CAAWG,UAAU,SAASsB,IAAKA,GACjC,kBAACC,EAAA,EAAD,CAAOvB,UAAU,SACjB,kBAACY,EAAD,CAAWC,UAAWQ,EAAKR,UAAUW,cAEnC,kBAACD,EAAA,EAAME,KAAP,CAAYzB,UAAU,mBACpB,wBAAIA,UAAU,SAAQ,uBAAG0B,KAAK,KAAKL,EAAKM,OACxC,qCAAON,EAAKO,OAAOC,KAAnB,YAA2BR,EAAKO,OAAOE,QAAvC,YAAkDT,EAAKO,OAAOG,eAC9D,2CAAOV,EAAKW,OAAZ,YAGJ,yBAAKhC,UAAU,UACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,QACb,6DACA,+EACA,2BAAG,uBAAGA,UAAU,OAAM0B,KAAK,KAAxB,+BAGP,yBAAK1B,UAAU,iBACb,2BAAIqB,EAAKY,GAAGC,WAEd,yBAAKlC,UAAU,eACb,4BAAQA,UAAU,WAAlB,oDAMV,OACE,6BACE,kBAACD,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACGkB,M,iBCGIgB,G,wDA9Cb,WAAYvC,GAAO,IAAD,8BAChB,cAAMA,IAONW,mBAAqB,SAAC6B,GACtB,IAAMC,EAAcD,EAAME,OAAOlC,MACjC,EAAKmC,SAAS,CAAClC,OAAOgC,KAVN,EAahB1B,kBAbgB,sBAaI,gCAAA6B,EAAA,4DACFC,mCACVC,EAFY,0DACFD,mCADE,iBAE6D,EAAKE,MAAMtC,QAFxE,SAGAuC,IAAMC,IAAIH,GAHV,OAGZI,EAHY,OAIZC,EAASD,EAAIE,KAAKC,KAAK7B,KAAI,SAACC,GACjC,MAAO,CACLR,UAAWQ,EAAKR,UAChBc,KAAKN,EAAKM,KACVC,OAAOP,EAAKO,OACZI,OAAOX,EAAKW,OACZC,GAAGZ,EAAKY,OAGX,EAAKM,SAAS,CAACW,cAAcH,IAbX,2CAXpB,EAAKJ,MAAQ,CACXtC,OAAO,GACP6C,cAAc,IAJA,E,qDA+BhB,OACE,yBAAKlD,UAAU,OACd,kBAAC,EAAD,CACEK,OAAQ8C,KAAKR,MAAMtC,OACnBE,mBAAoB4C,KAAK5C,mBACzBI,kBAAmBwC,KAAKxC,oBAE1B,kBAAC,EAAD,CACEQ,KAAMgC,KAAKR,MAAMO,qB,GAxCRE,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09cbaa3d.chunk.js","sourcesContent":["import React from 'react';\nimport {Button,Row,Col,Container,Form} from 'react-bootstrap'\n\nconst Search = (props) => {\n  return(\n    <Container>\n      <Form>\n        <Row className=\"mt-3\">\n          <Col sm={9}>\n            <Form.Control\n              value={props.search}\n              onChange={props.handleSearchChange}\n             />\n          </Col>\n          <Col sm={3}>\n           <Button variant=\"primary\" onClick={props.handleSearchClick}>検索</Button>\n          </Col>\n        </Row>\n      </Form>\n    </Container>\n  );\n}\n\nexport default Search;\n\n","import React from 'react';\nimport {Media,Container,Button,Row,Col,Image} from 'react-bootstrap';\nimport './App.css'\n\nfunction ShopImage(props){\n  if(props.image_url) {\n    return(\n      <Image width={150} height={150} src={props.image_url} />\n    )\n  } else {\n    return(\n      '画像がありません。'\n    )\n  }\n}\n\nfunction List (props) {\n  const list = props.list.map((item, key) => {\n    return(\n      <Container className='shadow' key={key}>\n        <Media className=\"media\">\n        <ShopImage image_url={item.image_url.shop_image1} />\n          {/* <Image width={150} height={150} src={item.image_url.shop_image1} /> */}\n          <Media.Body className=\"media-body ml-5\">\n            <h3 className=\"title\"><a href=\"#\">{item.name}</a></h3>\n            <p>{`${item.access.line} ${item.access.station} ${item.access.station_exit}`}</p>\n            <p>予算:{item.budget}円</p>\n          </Media.Body>\n        </Media>\n        <div className=\"footer\">\n          <div className=\"footer-right\">\n            <div className=\"text\">\n              <p>おすすめの</p>\n              <p>ネット予約コース</p>\n              <p><a className=\"blue\"href=\"#\">全て見る</a></p>\n            </div>\n          </div>\n          <div className=\"footer-center\">\n            <p>{item.pr.pr_short}</p>\n          </div>\n          <div className=\"footer-left\">\n            <button className=\"button1\">空席確認・予約</button>\n          </div>\n        </div>\n      </Container>\n    );\n  })\n  return(\n    <div>\n      <Row>\n        <Col>\n          {list}\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default List;","import React from 'react';\nimport './App.css';\nimport Search from './Search';\nimport List from './List';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      search:'',\n      search_result:[]\n    }\n  }\n\n    handleSearchChange = (event) => {\n    const searchValue = event.target.value;\n    this.setState({search:searchValue})\n  }\n\n    handleSearchClick = async () => {\n      const API_KEY = process.env.REACT_APP_API_KEY;\n      const url = `https://api.gnavi.co.jp/RestSearchAPI/v3/?keyid=${API_KEY}&name=${this.state.search}`\n      const res = await axios.get(url);\n      const result = res.data.rest.map((item) => {\n       return {\n         image_url: item.image_url,\n         name:item.name,\n         access:item.access,\n         budget:item.budget,\n         pr:item.pr\n       }\n      });\n      this.setState({search_result:result});\n    }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n       <Search\n         search={this.state.search}\n         handleSearchChange={this.handleSearchChange}\n         handleSearchClick={this.handleSearchClick}\n       />\n       <List \n         list={this.state.search_result}\n       />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}